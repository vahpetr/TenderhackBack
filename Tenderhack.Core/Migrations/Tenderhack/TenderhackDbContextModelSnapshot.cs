// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tenderhack.Core.Data.TenderhackDbContext;

#nullable disable

namespace Tenderhack.Core.Migrations.Tenderhack
{
    [DbContext(typeof(TenderhackDbContext))]
    partial class TenderhackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.1.21452.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Kpgz")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)");

                    b.HasKey("Id");

                    b.HasIndex("Kpgz")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConclusionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConclusionAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Number");

                    b.HasIndex("Price");

                    b.HasIndex("ProducerId");

                    b.HasIndex("PublicAt");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Amount");

                    b.HasIndex("ProductId");

                    b.HasIndex("Quantity");

                    b.HasIndex("ContractId", "ProductId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Kpp")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)");

                    b.HasKey("Id");

                    b.HasIndex("Kpp");

                    b.HasIndex("Name");

                    b.HasIndex("Inn", "Kpp")
                        .IsUnique();

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductAttributes", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductProperty", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("ValueId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "AttributeId", "ValueId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ValueId");

                    b.ToTable("ProductProperties", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductsAttributes", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ProductsAttributes", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductsValues", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ValueId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "ValueId");

                    b.HasIndex("ValueId");

                    b.ToTable("ProductsValues", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ProductValues", (string)null);
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Contract", b =>
                {
                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Organization", "Customer")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Organization", "Producer")
                        .WithMany("SaleHistory")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Order", b =>
                {
                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Contract", "Contract")
                        .WithMany("Orders")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Product", b =>
                {
                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductProperty", b =>
                {
                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductAttribute", "Attribute")
                        .WithMany("Properties")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Product", "Product")
                        .WithMany("Properties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductValue", "Value")
                        .WithMany("Properties")
                        .HasForeignKey("ValueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductsAttributes", b =>
                {
                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductAttribute", "Attribute")
                        .WithMany("ProductsAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Product", "Product")
                        .WithMany("ProductsAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductsValues", b =>
                {
                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.Product", "Product")
                        .WithMany("ProductsValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductValue", "Value")
                        .WithMany("ProductsValues")
                        .HasForeignKey("ValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Contract", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Organization", b =>
                {
                    b.Navigation("PurchaseHistory");

                    b.Navigation("SaleHistory");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.Product", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductsAttributes");

                    b.Navigation("ProductsValues");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductAttribute", b =>
                {
                    b.Navigation("ProductsAttributes");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Tenderhack.Core.Data.TenderhackDbContext.Models.ProductValue", b =>
                {
                    b.Navigation("ProductsValues");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
